#!/bin/bash

WAIT_FOR_TIMEOUT="${WAIT_FOR_TIMEOUT:-30}"
SLEEP_DURATION="${SLEEP_DURATION:-1}"
BYPASS_SCHEMA_VERSION="${BYPASS_SCHEMA_VERSION:-}"
SKIP_POST_DEPLOY="${SKIP_POST_DEPLOYMENT_MIGRATIONS:-}"

TMP=$(mktemp)

function checkStatus {
  # result=true|false, if command successful
  result=$(registry database migrate status --up-to-date ${SKIP_POST_DEPLOY:+ --skip-post-deployment} ${CONFIG_DIRECTORY}/${CONFIG_FILENAME})
  ret=$?

  if [ $ret -eq 0 ]; then
    # successful run, check the output, if we care
    if [ -z "${BYPASS_SCHEMA_VERSION}" ]; then
      ret=$(${result})
    fi
  fi

  return $ret
}

counter=1
until [ $counter -eq $WAIT_FOR_TIMEOUT ]; do
  # if successful, break and move on.
  if checkStatus ; then
    break
  fi
  # otherwise, sleep, increment, and try again.
  sleep $SLEEP_DURATION;
  ((counter++))
done

# check that if we failed, and output.
if [ $counter -eq $WAIT_FOR_TIMEOUT ]; then
  echo 'WARNING: Not all services were operational, with data migrations completed.'
  # Output a message as to how to resolve this container failing.
  echo 'If this container continues to fail, please see: https://docs.gitlab.com/charts/troubleshooting/index.html#application-containers-constantly-initializing'
  exit 1
fi

# `exec` the arguments passed to this script (if any)
exec "$@"
