// Code generated by MockGen. DO NOT EDIT.
// Source: internal/mocks/client_stub.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "gitlab.com/gitlab-org/gitlab-pages/internal/source/gitlab/api"
)

// MockClientStub is a mock of ClientStub interface.
type MockClientStub struct {
	ctrl     *gomock.Controller
	recorder *MockClientStubMockRecorder
}

// MockClientStubMockRecorder is the mock recorder for MockClientStub.
type MockClientStubMockRecorder struct {
	mock *MockClientStub
}

// NewMockClientStub creates a new mock instance.
func NewMockClientStub(ctrl *gomock.Controller) *MockClientStub {
	mock := &MockClientStub{ctrl: ctrl}
	mock.recorder = &MockClientStubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientStub) EXPECT() *MockClientStubMockRecorder {
	return m.recorder
}

// GetLookup mocks base method.
func (m *MockClientStub) GetLookup(ctx context.Context, domain string) api.Lookup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLookup", ctx, domain)
	ret0, _ := ret[0].(api.Lookup)
	return ret0
}

// GetLookup indicates an expected call of GetLookup.
func (mr *MockClientStubMockRecorder) GetLookup(ctx, domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLookup", reflect.TypeOf((*MockClientStub)(nil).GetLookup), ctx, domain)
}

// Resolve mocks base method.
func (m *MockClientStub) Resolve(ctx context.Context, domain string) *api.Lookup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", ctx, domain)
	ret0, _ := ret[0].(*api.Lookup)
	return ret0
}

// Resolve indicates an expected call of Resolve.
func (mr *MockClientStubMockRecorder) Resolve(ctx, domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockClientStub)(nil).Resolve), ctx, domain)
}
