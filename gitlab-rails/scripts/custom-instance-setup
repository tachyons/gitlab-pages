#!/usr/bin/env ruby
# frozen_string_literal: true

# Workaround for disabling the authorized_keys write to the database.
# A proper fix is being tracked in: https://gitlab.com/gitlab-org/gitlab-ee/issues/4156
puts 'Disabling authorized keys write in the database.'
setting = ::ApplicationSetting.current_without_cache || ::ApplicationSetting.create_from_defaults
setting.update_attribute(:authorized_keys_enabled, false)

puts 'Enabling incremental logging of CI jobs.'
Feature.enable('ci_enable_live_trace')

if ENV['PAGES_UPDATE_LEGACY_STORAGE'] == 'true'
  puts 'Enabling access to disk storage for GitLab Pages'
  Feature.enable('pages_update_legacy_storage')
else
  puts 'Disabling access to disk storage for GitLab Pages'
  Feature.disable('pages_update_legacy_storage')
end

puts 'Registering OAuth applications.'
secrets_dir = ENV['OAUTH_SECRET_DIR'] || '/etc/gitlab/oauth-secrets'
Dir.glob("#{secrets_dir}/*").each do |app_path|
  app = File.basename(app_path).titleize
  puts "Registering #{app} as an OAuth application."
  begin
    uid = File.read(File.join(app_path, 'appid')).strip
    secret = File.read(File.join(app_path, 'appsecret')).strip
    redirecturi = File.read(File.join(app_path, 'redirecturi')).strip

    oauth_app = Doorkeeper::Application.where({ redirect_uri: redirecturi, name: app }).by_uid_and_secret(uid, secret)
    unless oauth_app
      Doorkeeper::Application.where({ redirect_uri: redirecturi, name: app, uid: uid, secret: secret }).create!
    end
    puts "Successfully registered #{app}."
  rescue Errno::ENOENT
    puts "Necessary secrets not found. Skipping registration of #{app}"
    next
  rescue RuntimeError, ActiveRecord::RecordInvalid
    puts "Failed to register #{app}."
    next
  end
end
