ARG CI_REGISTRY_IMAGE="registry.gitlab.com/gitlab-org/build/cng"
ARG TAG="master"
ARG FROM_IMAGE="$CI_REGISTRY_IMAGE/gitlab-ruby"
ARG PG_VERSION="14.1"
ARG PG_IMAGE="$CI_REGISTRY_IMAGE/postgresql:${PG_VERSION}"
ARG GM_IMAGE="$CI_REGISTRY_IMAGE/gitlab-graphicsmagick:${GM_VERSION}"
ARG EXIFTOOL_IMAGE="$CI_REGISTRY_IMAGE/gitlab-exiftool:${EXIFTOOL_VERSION}"
ARG GEI_IMAGE="$CI_REGISTRY_IMAGE/gitlab-elasticsearch-indexer:1.0.0"
ARG GME_IMAGE="$CI_REGISTRY_IMAGE/gitlab-metrics-exporter:main"
ARG GITLAB_VERSION=v10.7.0-ee
ARG ASSETS_IMAGE="registry.gitlab.com/gitlab-org/gitlab-ee/gitlab-assets-ee:${GITLAB_VERSION}"
ARG GOMPLATE_TAG=
ARG GOMPLATE_IMAGE="${CI_REGISTRY_IMAGE}/gitlab-gomplate:${GOMPLATE_TAG}"

<% if !compile_assets %>
FROM ${ASSETS_IMAGE} as assets
<% end %>
FROM ${PG_IMAGE} as pg_image
FROM ${GME_IMAGE} as gme_image
FROM ${GM_IMAGE} as graphicsmagick_image
FROM ${EXIFTOOL_IMAGE} as exiftool_image
FROM ${GOMPLATE_IMAGE} as gomplate
<% if ee? %>
FROM ${GEI_IMAGE} as gei_image
<% end %>
FROM ${FROM_IMAGE}:${TAG} as builder

ARG BUILD_DIR=/tmp/build
ARG DATADIR=/var/opt/gitlab
ARG CPU_COUNT=4
ARG GITLAB_USER=git
ARG COMPILE_ASSETS_ENV="RAILS_ENV=production NODE_ENV=production USE_DB=false SKIP_STORAGE_VALIDATION=true NODE_OPTIONS=--max_old_space_size=3584"
ARG NODE_VERSION=16.14.2
ARG YARN_VERSION=1.22.18

# install runtime deps
# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=866729
RUN mkdir -p /usr/share/man/man7 \
    && apt-get update \
    && apt-get install -y --no-install-recommends libicu67 libre2-9 tzdata

# Include postgres client tools
COPY --from=pg_image /usr/local/psql/bin/ /usr/bin/
COPY --from=pg_image /usr/local/psql/lib/ /usr/lib/
COPY --from=pg_image /usr/local/psql/include/ /usr/include/

# Include GraphicsMagick (bin,include,lib,share)
COPY --from=graphicsmagick_image /usr/local/ /usr/local/

RUN buildDeps=' \
    make \
    cmake \
    gcc \
    g++ \
    libicu-dev \
    libffi-dev \
    libre2-dev \
    musl-dev \
    patch \
    pkg-config \
    libkrb5-3 \
    libkrb5-dev \
    git \
    sudo' \
    && apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends $buildDeps \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir -p ${BUILD_DIR}

RUN curl --retry 6 -fsSL "https://nodejs.org/download/release/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz" \
  | tar --strip-components 1 -xzC /usr/local/

RUN mkdir /usr/local/yarn \
  && curl --retry 6 -fsSL "https://yarnpkg.com/downloads/${YARN_VERSION}/yarn-v${YARN_VERSION}.tar.gz" \
  | tar -xzC /usr/local/yarn --strip 1 \
  && ln -sf /usr/local/yarn/bin/yarn /usr/local/bin/ \
  && ln -sf /usr/local/yarn/bin/yarnpkg /usr/local/bin/

# create gitlab user
RUN adduser --disabled-password --gecos 'GitLab' ${GITLAB_USER}

# $DATADIR is the main mountpoint for gitlab data volume
RUN mkdir ${DATADIR} && \
    cd ${DATADIR} && \
    mkdir data repo config && \
    chown -R ${GITLAB_USER}:${GITLAB_USER} ${DATADIR}

# https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact
ARG GITLAB_VERSION
ARG GITLAB_NAMESPACE="gitlab-org"
ARG GITLAB_PROJECT=gitlab-ee
ARG FETCH_ARTIFACTS_PAT
ARG CI_API_V4_URL

# Download GitLab
ARG CACHE_BUSTER=false
RUN cd /home/${GITLAB_USER} && \
    echo "Downloading source code from ${CI_API_V4_URL}/projects/${GITLAB_NAMESPACE}%2F${GITLAB_PROJECT}/repository/archive.tar.bz2?sha=${GITLAB_VERSION}" && \
    sudo -u ${GITLAB_USER} -H curl -f --retry 6 --header "PRIVATE-TOKEN: ${FETCH_ARTIFACTS_PAT}" -o gitlab.tar.bz2 "${CI_API_V4_URL}/projects/${GITLAB_NAMESPACE}%2F${GITLAB_PROJECT}/repository/archive.tar.bz2?sha=${GITLAB_VERSION}" && \
    sudo -u ${GITLAB_USER} -H tar -xjf gitlab.tar.bz2 && \
    REVISION=$(find -maxdepth 1 -name ${GITLAB_PROJECT}-* -print | awk -F '-' '{print $NF}' | cut -c -11) && \
    mv ${GITLAB_PROJECT}-* /srv/gitlab && \
    chown ${GITLAB_USER}:${GITLAB_USER} /srv/gitlab && \
    echo -n ${REVISION} > /srv/gitlab/REVISION && \
    rm gitlab.tar.bz2

# Configure GitLab
RUN cd /srv/gitlab && \
    sudo -u ${GITLAB_USER} -H mkdir ${DATADIR}/.upgrade-status && \
    sudo -u ${GITLAB_USER} -H echo 'gitlab-cloud-native-image' > INSTALLATION_TYPE && \
    sudo -u ${GITLAB_USER} -H cp config/gitlab.yml.example config/gitlab.yml && \
    sudo -u ${GITLAB_USER} -H cp config/resque.yml.example config/resque.yml && \
    sudo -u ${GITLAB_USER} -H cp config/secrets.yml.example config/secrets.yml && \
    sudo -u ${GITLAB_USER} -H cp config/database.yml.postgresql config/database.yml && \
    sed --in-place "/host: localhost/d" config/gitlab.yml && \
<% unless ee? -%>
    sed --in-place "/geo:/,/^$/d" config/database.yml && \
<% end -%>
    sed --in-place "/port: 80/d" config/gitlab.yml && \
    sed --in-place "s/# user:.*/user: ${GITLAB_USER}/" config/gitlab.yml && \
    sed --in-place "s:/home/git/repositories:${DATADIR}/repo:" config/gitlab.yml

# Install gems
COPY --chown=git vendor/bundle/ /srv/gitlab/vendor/bundle

<% if compile_assets and gitlab_bundle_gemfile %>
RUN cd /srv/gitlab && \
    sudo -u git -H bundle config set --local gemfile <%= gitlab_bundle_gemfile %> && \
    sudo -u git -H bundle config set --local path /srv/gitlab/vendor/bundle/
<% end %>

RUN cd /srv/gitlab && \
    sudo -u git -H bundle install --clean --deployment --without development test mysql aws --jobs 4 --retry 5

# Install node dependencies
RUN cd /srv/gitlab && \
    sudo -u ${GITLAB_USER} -H $COMPILE_ASSETS_ENV yarn install --production --pure-lockfile

# compile GetText PO files
RUN cd /srv/gitlab && \
    sudo -u ${GITLAB_USER} -H $COMPILE_ASSETS_ENV bundle exec rake gettext:compile

<% if compile_assets %>
# compile assets
RUN cd /srv/gitlab && \
    sudo -u ${GITLAB_USER} -H $COMPILE_ASSETS_ENV bundle exec rake gitlab:assets:compile
<% end %>

COPY shared/build-scripts/ /build-scripts

# Clean up
RUN cd /srv/gitlab && \
    rm -rf node_modules/ tmp/ spec/ ee/spec/ && \
    rm -rf qa/ rubocop/ tooling/ .gitlab/ .github/ docker/ && \
    rm -rf changelogs/ danger/ Dangerfile && \
    /build-scripts/cleanup-gems

# Set the path that bootsnap will use for cache
ENV BOOTSNAP_CACHE_DIR=/srv/gitlab/bootsnap
# Generate bootsnap cache
RUN echo "Generating bootsnap cache"; \
    cd /srv/gitlab && \
    sudo -u ${GITLAB_USER} mkdir ${BOOTSNAP_CACHE_DIR} && \
    sudo -u ${GITLAB_USER} -H $COMPILE_ASSETS_ENV ENABLE_BOOTSNAP=1 BOOTSNAP_CACHE_DIR=${BOOTSNAP_CACHE_DIR} \
         busybox time bin/rake about 2>/dev/null && \
    du -hs ${BOOTSNAP_CACHE_DIR} ;
# exit code of this command will be that of `du`

<% if !compile_assets %>
# install assets from assets container (see ARG ASSETS_IMAGE at top)
COPY --chown=git --from=assets assets /srv/gitlab/public/assets/
<% end %>

# remove uncompressed maps as per #2062
RUN find /srv/gitlab/public/assets/webpack -name '*.map' -type f -print -delete

## FINAL IMAGE ##

FROM "$CI_REGISTRY_IMAGE/gitlab-ruby:${TAG}"
ARG DATADIR=/var/opt/gitlab
ARG CONFIG=/srv/gitlab/config
ARG GITLAB_USER=git

# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=866729
RUN mkdir -p /usr/share/man/man7 \
    && apt-get update \
    && apt-get install -q -y --no-install-recommends \
         libicu67 libre2-9 tzdata xtail \
         libpng16-16 libtiff5 libturbojpeg0 zlib1g \
         # required for exiftool
         perl \
    && rm -rf /var/lib/apt/lists/*

<% if ee? %>
# Include the gitlab-elasticsearch-indexer
COPY --from=gei_image /usr/local/bin/gitlab-elasticsearch-indexer /usr/bin/
<% end %>

# Include the gitlab-metrics-exporter binary
COPY --from=gme_image /usr/local/bin/gitlab-metrics-exporter /usr/bin/

# Include postgres client tools
COPY --from=pg_image /usr/local/psql/bin/pg_* /usr/bin/
COPY --from=pg_image /usr/local/psql/bin/psql /usr/bin/
COPY --from=pg_image /usr/local/psql/lib/libpq.so* /usr/lib/

# Include GraphicsMagick (binary and license)
COPY --from=graphicsmagick_image /usr/local /usr/local

# Requirement of exiftool
RUN apt-get update -y \
  && apt-get install --no-install-recommends -y perl \
  && rm -rf /var/lib/apt/lists/* 
COPY --from=exiftool_image / /

COPY --from=gomplate /gomplate /usr/local/bin/gomplate


RUN buildDeps=' \
    libicu-dev \
    libffi-dev \
    libre2-dev \
    libedit-dev \
    libxml2-dev \
    sudo' \
    && apt-get update \
    && apt-get install -y --no-install-recommends $buildDeps \
    && rm -rf /var/lib/apt/lists/*

RUN adduser --disabled-password --gecos 'GitLab' ${GITLAB_USER}

COPY --chown=git --from=builder /srv/gitlab /srv/gitlab
COPY --chown=git --from=builder /var/opt/gitlab /var/opt/gitlab

RUN mv /srv/gitlab/log /var/log/gitlab && \
    ln -s /var/log/gitlab /srv/gitlab/log && \
    cd /srv/gitlab && \
    chmod o-rwx config/database.yml && \
    chmod 0600 config/secrets.yml && \
    chmod -R u+rwX builds/ && \
    chmod -R u+rwX shared/artifacts/ && \
    chmod -R ug+rwX shared/pages/ && \
    chmod -R ug+rwX,o-rwx ${DATADIR}/repo && \
    chmod -R ug-s ${DATADIR}/repo && \
    find ${DATADIR}/repo -type d -print0 | sudo xargs -0 chmod g+s && \
    mkdir -p public/uploads && chown ${GITLAB_USER}:${GITLAB_USER} public/uploads && \
    chmod 0700 public/uploads && \
    mkdir /home/git/gitlab-shell && \
    chown git:git /home/git/gitlab-shell && \
    ln -s /srv/gitlab/GITLAB_SHELL_VERSION /home/git/gitlab-shell/VERSION

COPY scripts/ /scripts

RUN chown -R ${GITLAB_USER} /scripts

ENV RAILS_ENV=production \
    BOOTSNAP_CACHE_DIR=/srv/gitlab/bootsnap \
    EXECJS_RUNTIME=Disabled \
    CONFIG_TEMPLATE_DIRECTORY=${CONFIG} \
    UPGRADE_STATUS_DIR=${DATADIR}/.upgrade-status

VOLUME /var/opt/gitlab /var/log
