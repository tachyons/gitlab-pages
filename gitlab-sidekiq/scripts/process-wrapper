#!/bin/bash

set -e

if [ "${USE_GITLAB_LOGGER-0}" -eq 1 ]; then
    /usr/local/bin/gitlab-logger /var/log/gitlab &
else
    if command -v xtail >/dev/null; then
        xtail /var/log/gitlab &
    else
        # touch logs that would be generated by Jobs
        touch /var/log/gitlab/repocheck.log
        tail -f /var/log/gitlab/* &
    fi
fi

if [ -n "${SIDEKIQ_NEGATE_QUEUES}" ]; then
    queues="${SIDEKIQ_NEGATE_QUEUES}"
    negate_flag='--negate'
else
    queues="${SIDEKIQ_QUEUES:-*}"
    negate_flag=''
fi

if [[ "${SIDEKIQ_QUEUE_SELECTOR}" = 'true' ]]; then
    queue_selector_flag='--queue-selector'
else
    queue_selector_flag=''
fi

# sidekiq-cluster offers two things:
#
# 1. The ability to run and supervise multiple Sidekiq processes,
#    potentially listening to different queues.
# 2. Enhanced queue pre-processing, including the ability to negate
#    a set of queues and the experimental query selector.
#
# In this case, we do not want to start multiple Sidekiq processes
# inside a single pod - for that, we'd run additional pods. As we
# only need the second item, we use the `--dryrun` option to
# sidekiq-cluster to get the command line it would execute, and then
# execute that command directly.
#
# See https://gitlab.com/gitlab-org/build/CNG/-/merge_requests/418#note_320550297
#
# switch to runtime directory
cd /srv/gitlab

/srv/gitlab/bin/$(
    /srv/gitlab/bin/sidekiq-cluster \
        --dryrun \
        -r /srv/gitlab \
        -e production \
        --min-concurrency ${SIDEKIQ_CONCURRENCY_MIN:-$SIDEKIQ_CONCURRENCY} \
        --max-concurrency ${SIDEKIQ_CONCURRENCY_MAX:-$SIDEKIQ_CONCURRENCY} \
        -t $SIDEKIQ_TIMEOUT \
        $queue_selector_flag \
        $negate_flag \
        "${queues}"
    )
